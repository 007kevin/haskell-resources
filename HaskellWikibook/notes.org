* Variables & Functions
  - Haskell variables are immutable
  - where :: when defining a function and want to define results that are
             local to the function
             #+BEGIN_SRC haskell
               heron a b c = sqrt (s * (s - a) * (s - b) * (s - c))
                 where
                   s = (a + b + c) / 2
             #+END_SRC
* Truth values
  - infix operators can be written as functions using brackes. The following
    expressions are equivalent
    #+BEGIN_SRC haskell
      4 + 9 === 13
      (==) (4 + 9) 13
    #+END_SRC
  - *in general, tangible things in Haskell are either values or functions*
** Guards
   syntactic sugar that relies on booleans values to write simple but powerful
   functions
   
   To define absolute value function:
   #+BEGIN_SRC haskell
     absolute x
       | x < 0     = 0 - x
       | otherwise = x
   #+END_SRC

   guards begin with a pipe character followed by a boolean expression followed
   by the rest of the definition.

   *Note* there is no syntactical magic begin 'otherwise'. It is defined
   alonside the default variables and functions of Haskell as
   #+BEGIN_SRC haskell
     otherwise = True
   #+END_SRC

** where and guards
   where clause works with guards.
   Consider a function which computes the number of (real) solutions for
   the quadratic equation
   #+BEGIN_SRC haskell
     numOfRealSolutions a b c
      | disc > 0  = 2
      | disc == 0 = 1
      | otherwise = 0
          where
          disc = b^2 - 4*a*c
   #+END_SRC
             
* Type basics
  - All types names in Haskell must begin with a capital letter
  - All variables in Haskell must begin with a lower case letter
  - :type :: to check the type of any expression

** Functional types
   Consider two things when figuring out a type of a function
   
   1) the type of values it takes as its input
   2) the type of values it returns
      
   Thus the description of a function's type is in terms of the types of
   argument(s) it takes and the type of value it evaluates to
      
* Lists and tuples
** Lists
  Haskell builds all lists by consing all elements to the empty list.
  [1,2,3,4,5] is equivalent to 1:2:3:4:5:[]

  the cons operator (:) must have a list as its second argument and
  all elements of the list must be of same type
** Tuples
   Tuples offer another way of storing multiple values in a single value.
   Key differences between tuples and lists:
   - Tuples have a fixed number of elements (immutable); you cannot cons a tuple.
     Makes sense to use tuples when knowing in advance how many values are to be stored.
     (i.e 2D coordinates of a point)
   - Elements of tuples need not be all of the same type.

     nomenclature: in general use n-tuple to denote a tuple of size n. 2-tuples are called pairs,
     3-tuples called triples, quadruples, quintuples, etc.

     tuples are handy when wanting to return more than one value froma function. 

     The type of a tuple is defined not only by its size but also the type of objects it contains. 
     For example, ("Hello", 32) and (47,"World") are fundamentally different since one is
     (String, Int) whereas other (Int, String). This difference in types means they cannot
     be put into a list.

** Retrieving values
   Standard functions for retrieving values from tuples (works only on pairs):
   fst :: (a,b) -> a
   snd :: (a,b) -> b

   Standard functions for retrieving values from lists):
   head :: [a] -> a
   tail :: [a] -> [a] -- get the list after the first value

   *Note* attempting to run head or tail on the empty list will crash a program

* Simple input and output
  '<-' can be used with any action except the last
  Q: Why can't we get a value out of the final action of a do block?
  A: Without getting too deep, suffice to say you use <- to get the
     value of an action, and Haskell is always expecting another action
     to follow it
  
  #+BEGIN_SRC haskell
    :t putStrLn
      putStrLn :: String -> IO ()
  #+END_SRC
     *Type of putStrLn takes a String parameter and returns*
     *an IO action that when run returns the () value.*

  #+BEGIN_SRC haskell
    :t getLine
      getLine :: IO String
  #+END_SRC
     *Type of getLIne take no input paramter and returns*
     *an action that when run returns a String*

  Within a 'do block', each line runs the actions in which
  the returned value can be assigned via <-

  You can't use actions in situations that don't call for them.
  For the converse, you can use non-actions in situations that
  expect actions.
     
  For situations calling for non-actions to be used in actions,
  one can use the 'return' code or 'let' binding.

  _let bindings in do blocks_
  #+BEGIN_SRC haskell
main =
 do name <- getLine
    let loudName = makeLoud name
    putStrLn ("Hello " ++ loudName ++ "!")
    putStrLn ("Oh boy! Am I excited to meet you, " ++ loudName)
  #+END_SRC
  
  notice the let binding above is missing an in. This is because
  let bindings inside do blocks do not (optionally )require the 
  in keyword.
* Recursion
* Lists II
  - The -> in type signatures is right associative. This means one
    can read the this signature
    #+BEGIN_SRC haskell
      multiplyList :: Int -> [Int] -> [Int]
    #+END_SRC
    as
    #+BEGIN_SRC haskell
      multiplyList :: Int -> ([Int] -> [Int])
    #+END_SRC
    which is interprets multiplyList as a function that takes one integer
    arguments and evalutates to another function. THe function returned, then,
    takes a list of integers and returns another list of integers.
 
  - point-free style :: the definition style of functions with no argument
       variables

  *Note* All function in Haskell really take only one argument!

  - higher-order functions :: Functions like map which take other functions as arguments

  - Thanks to lazy evaluation, Haskell lists can be infinite since the callers only evaluates
    only up to what is needed.
    For example, both terminate in finite number of steps AND results to the same answer:
    scanSum( (takeInt 10 [1..]))
    (takeInt 10 (scanSum [1..]))
    
* Lists III
** List comprehensions
   - List comprehensions :: syntactic sugar for some common list operations such as filtering
     #+BEGIN_SRC haskell
retainEven es = [n | n <- es, isEven n]
     #+END_SRC
     interpretted as:
     - (starting from middle) :: take the list es and draw ( <- ) each of its elements as a value n
     - (after the comma) :: for each drawn n, test the boolean condition isEven
     - (before | ) :: if (and only if) the boolean condition is satistied, append n to the new list
                      being created (note the square brackets around the whole expression)

     thus is es is [1,2,3,4], then we would get back the list [2,3]. 1 and 3 fail the boolean hence not drawn
     
      
     
* Other data structures
  - catamorphisms :: a general way to collapse a data structure into a single value (i.e folds)
* Classes and types
  Broadly speaing, the point of type classes is to ensure that certain operations will be available for
  values of chosen types. For example, if we know a type belongs to ( i.e instantiates ) the class
  /Fractional/, then we are guaranteed to be able to perform real division with its values

  #+BEGIN_SRC haskell
class  Eq a  where
   (==), (/=) :: a -> a -> Bool

       -- Minimal complete definition:
       --      (==) or (/=)
   x /= y     =  not (x == y)
   x == y     =  not (x /= y)
  #+END_SRC

  From looking at the definition of Eq class from Prelude, it states that if a type 'a' is to be made
  an /instance/ of the class Eq, it must support the functions (==) and (/-) (i.e class methods), both
  of them having type a -> a -> Bool

  Additonally, the class provides default definitions for (==) and (/=) /in terms of each other/. As a 
  consequence, there is no need for a type is Eq to provide both definitions. If one is given, then the
  other is generate automatically.

  With a class defined, we proceed to make exisiting types instances of it. 

  *Example* algebraic data type made into an instance of Eq by /instance declaration/
  #+BEGIN_SRC haskell
data Foo = Foo {x :: Integer, str :: String}
 
instance Eq Foo where
   (Foo x1 str1) == (Foo x2 str2) = (x1 == x2) && (str1 == str2)
  #+END_SRC
  which we get
  #+BEGIN_SRC bash
*Main> Foo 3 "orange" == Foo 6 "apple"
False
*Main> Foo 3 "orange" /= Foo 6 "apple"
True
  #+END_SRC
  A few important remarks
  1. The class Eq is defined in the Standard Preluse. This code sample defines the type Fp and then declares
     it to be an instance of Eq. The three definitions (class, data type, and instance ) are completely
     separate and there is no rule about how they are grouped. This means you could easily create a new class
     Bar and then declare the type Integer to be an instance of it.
  2. Classes are not types 

  
* Introducing Functor
  As discussed before, we can conceivably define a map-style function for any
  arbitrary data structure.

  When map was first introducted, there was a process of taking a very specific
  function for list elements and generalizing to show how map combines any 
  appropriate function with all sorts of lists. 

  Now... we will generalize this /further/. Instead of map-for-lists and
  map-for-trees and other distinct maps, how about a general concept of maps
  for ALL sorts of mappable types?

  Introducing the Functor class!

  - Functor :: is a Prelude class for types which can be mapped over. It has
               a single method called fmap. The class is defined as follows:

               #+BEGIN_SRC haskell
                 class Functor f where
                   fmap :: (a -> b) -> f a -> f b
               #+END_SRC

               The type variable 'f' is a parameterized data type; in the
               signature of 'fmap', 'f' takes 'a' as a type parameter in 
               one of its appearances, and 'b' in the other.

  *Example 1*
  By replacing 'f' with 'Maybe' we get the following signature for 'fmap',
  which fits the natural definition
  #+BEGIN_SRC haskell
    fmap :: (a -> b) -> Maybe a -> Maybe b
    instance Functor Maybe where
      fmap f Nothing = Nothing
      fmap f (Just x ) - Just (f x)
  #+END_SRC

  *Example 2*
  The 'Functor' instance for lists
  #+BEGIN_SRC haskell
    instance Function [] where
      fmap = map
  #+END_SRC

  *Example 3*
  The 'Funcfor' instance for Tree
  #+BEGIN_SRC haskell
    instance Functor Tree where
      fmap f (Leaf x) = Leaf (f x)
      fmap f (Branch left right) = Branch (fmap f left) (fmap f right)
  #+END_SRC

** The functor laws
   When providing a new instance of 'Functor', you should ensure it satifies the
   two functor laws. There is nothing mysterious about these laws; their role
   is to guarantee 'fmap' behaves sanely and actually performs a mapping operation
   (as opposed to some other nonsense).

   *The first law is*
   #+BEGIN_SRC haskell
     fmap id = id
   #+END_SRC
   which states that mapping 'id' over a functorial value must return the functorial
   value unchanged.

   *The second law is*
   #+BEGIN_SRC haskell
     fmap (g . f) = fmap g . fmap f
   #+END_SRC
   It states that it should not matter whether we map a composed function or first
   map one function and then the other ( assuming the application order remains
   the same in both cases )

** What did we gain, why the Functor class?
   At this point, we can ask what benefit we get from the extra layer of 
   generalization brought by the 'Functor' class. There are two significant
   advantages:

   - The availability of the fmap method relieves us from having to recall, read
     , and write a plethora of differently named mapping methods (e.g maybeMap,
     treeMap, weirdMap, ad infinitum). As a consequence, code becomes cleaner
     and easier to understand. On spotting a use of fmap, we instantly have
     a general idea of what is going on. Given the gurantees of the functor laws,
     this general idea is surprisingly precise.

   - Using the type class system, we can write fmap based algorithms which work
     out of the box with any /functor/, - be it [], Maybe, Tree or whatever you
     need. Indeed a number of useful classes in the core libraries inherit from
     Functor

   Type classes makes it possible to create general solutions to whole categories
   of problems. Depending on what you use Haskell for, you may not need to define
   new classes often, but ou will certainly be using type classes all the time.
   Many of the most powerful features and sophisticated capabilities of Haskell
   rely on type classess. From this point on, classes will be a prominent presence
   in our studies.

   *side*
   Based on the reading of functor, the type definition of fmap

   fmap :: Functor f => (a -> b) -> f a -> f b

   is interpretted as follows:

   fmap takes a function that takes some value 'a' and return 'b' and a 
   paramterized type f (which is an instance of Functor ) instantiated
   with value a and returns another parameterized type f instantiated
   with value b.

   Whenever types instantiated from the Functor class define the fmap
   method, we have a way of applying a function to those types without
   having to know (i.e define) a way to apply the function to those types.

   

